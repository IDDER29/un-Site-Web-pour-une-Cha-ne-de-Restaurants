// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// ce site va permettre aux clients de consulter les repas, réserver une table, et qui doit regrouper aussi toutes les informations essentielles pour les futurs clients et les inciter à rendre visite pour goûter sa cuisine !

// Administrateur : Gère l’ensemble du site web et a accès à toutes les données.
//Gérant du Restaurant : Responsable de la gestion des employés, des réservations et des repas pour son restaurant.
//Employé : Peut être un chef, un serveur, ou un membre du personnel de nettoyage, avec des permissions limitées selon leur poste.

enum UserRole {
  CHEF
  RESTAURANT_MANAGER
  EMPLOYEE
  ADMIN
}

model Restaurant {
  RestaurantID Int           @id @unique @default(autoincrement())
  Name         String        @unique
  Address      String
  Phone        String        @unique
  Email        String        @unique
  Image        String?
  Employees    Employee[]
  Meals        Meal[]
  Reservations Reservation[]
  Newsletters  Newsletter[]
}

model Employee {
  EmployeeID   Int        @id @unique @default(autoincrement())
  FirstName    String
  LastName     String
  Image        String?
  Role         UserRole   @default(EMPLOYEE)
  RestaurantID Int
  Restaurant   Restaurant @relation(fields: [RestaurantID], references: [RestaurantID])
}

model Category {
  CategoryID Int     @id @unique @default(autoincrement())
  Name       String  @unique
  Image      String? @unique
  Meals      Meal[]
}

model Meal {
  MealID       Int        @id @unique @default(autoincrement())
  Name         String     @unique
  Description  String
  Price        Float
  Image        String     @unique
  CategoryID   Int
  RestaurantID Int
  Category     Category   @relation(fields: [CategoryID], references: [CategoryID])
  Restaurant   Restaurant @relation(fields: [RestaurantID], references: [RestaurantID])
}

model Reservation {
  ReservationID  Int        @id @unique @default(autoincrement())
  ClientID       Int
  RestaurantID   Int
  DateTime       DateTime   @default(now())
  NumberOfPeople Int
  Client         Client     @relation(fields: [ClientID], references: [ClientID])
  Restaurant     Restaurant @relation(fields: [RestaurantID], references: [RestaurantID])
}

model Client {
  ClientID     Int           @id @unique @default(autoincrement())
  FirstName    String
  LastName     String
  Phone        String        @unique
  Email        String        @unique
  Image        String?
  Reservations Reservation[]
  Newsletters  Newsletter[]
}

model Newsletter {
  NewsletterID           Int         @id @unique @default(autoincrement())
  Email                  String      @unique
  SubscriptionDate       DateTime    @default(now())
  ClientID               Int?
  Client                 Client?     @relation(fields: [ClientID], references: [ClientID])
  Restaurant             Restaurant? @relation(fields: [restaurantRestaurantID], references: [RestaurantID])
  restaurantRestaurantID Int?
}
